Quelques pistes de réfléxions pour aller plus loin.......et pour votre curiosité :)

  * Quelle est la différence entre include et require en PHP?
   Criticité d'erreur n'est pas la même: mieux vaut utiliser include que require

  * Que signifie instead of ? Pourquoi l'utiliser en Orienté Objet? Décrivez un exemple ... ???

  + insteadof permet de controler une instance / objet est en provenance d'une classe

  * Que signifie le "===" en Orienté Objet? Décrivez le en 1 exemple
		 == ou ===
     === c'est  pour comparer le type/ la nature de mes 2 variables comparées


      $objetDVD = new Dvd();

      $objetBlueRay = new BlueRay();

      $objetDVD === $objetBlueRay; = Faux

      123 == "123"

      "123" === 123

      123.0 === 123

	* Qu'est ce qu'une composition d'objet? En a-t-on deja utilisé dans le miniprojet? Si oui, où?

  -> Attribut connexion de ma classe Movie

  + Quand une classe a des attributs qui sont des objets d'autre classe
  " Quand il y a un ou plusieurs objets dans un meme objet"



  * Qu'est ce qu'un sous-namespace ? Décrivez le en 1 exemple...
  C'est un namespace avec des sous-namespace (dossier/sous-dossier)
  exemple:

  use src\lib\Movie;


	* Peut-on créer un objet B provenant d'une classe B dans une classe A?
  Oui, mais à éviter: C'est une dépendance forte entre les classes (à privilégier l'injection d'objet)

  class A{

      public function toto(){
        $obj = new B();
      }
  }

  class B {


  }

  * Quelle est la différence entre classe et classe abstraite?

  * Quelle est la différence entre classe et classe abstraite?

+ C'est une classe qui ne peut créer des objets. Elle sert uniquement à etre héritée.
La classe abstraite ne peut pas hérité d'une autre classe.

abstract class Humain{
  protected $nom;
  protected $prenom;
}

class Personnel extends Humain{ }


* Que signifie S.O.L.I.D.? A quoi ça sert dans l'Orienté Objet?
S.O.L.I.D.

          S: Principe de responsabilité unique: Une classe fait un seul métier (logique métier). (ne pas avoir 3000 lignes de codes)
          O: Open/Close: Qui reste ouvert a la création, fermer a la modification (Classe)

          Quand une classe a des methodes ou des attributs que je veu modifier,
          il vaut mieux passer par l'héritage pour surcharger(modifier) le comportement
          de certains attributs ou méthodes.
          Fermé a la modification, ouvert à l'extension.

          class Alpha{
          public function mail($sujet, $contenu, $destinataire){
          }
          }
          class Beta extends Alpha{
          public function mail($sujet, $contenu, $destinataire){
            // autre chose
          }
          }
          $obj = new Beta();
          $obj->mail($sujet, $contenu...)



          L: Principe de substitution de Liskov

          class Alpha{

          public function mail($sujet, $contenu, $destinataire){
          // envoyer un mail
          }

          }

          class Beta extends Alpha{


          public function mail($sujet, $contenu,
              $destinataire, $html = true,
              $protocols = []){
              // autre chose : envoi de mail
              // + insert dans ma bdd
          }


          public function mailOther($sujet, $contenu,
            $destinataire, $html = true,
            $protocols){
          // autre chose : envoi de mail
          // + insert dans ma bdd
          }

          }



          $obj2 = new Beta();
          $obj2->mail("Il fait beau aujourd'hui" ,
                  "Super, tous au Parc");

          $obj = new Beta();
          $obj->mail("Il fait beau aujourd'hui",
                  "Super, tous au Parc");


          C'est pouvoir remplacer un objet B issue d'une classe fille, par un objet A issue d'une classe mere
          Sans casser la compatibilité des méthodes.


          I: Principe de ségrégation d'interfaces

          Interface:

          + C'est une abstraction de signatures de methodes en communs avec diverses classes.
          + C'est un sommaire(resumé) de méthodes pour homogéniser des comportements entre les classes

          ségrégation d'interfaces:

          + Pour homogénéiser plusieurs classes, et ne pas avoir de classes Parents(par héritage)
          je peux séparer certains comportements entre les classes dans 1 ou plusieurs interfaces.
          Par ailleurs, cela procure plus de souplesse dans les arguments de méthodes.


          exemple: La gestion de Visibilité entre une Catégorie, Un Movie, Un Commentaire


          public static function gestionVisibilite(VisibleInterface $obj){

            // gerer la visibilité
            // objet, quelque soit la provenance de ma classe
            // a un comportement suffisant pour etre implémenter dans cette methode
          }


          D: Principe d'injection de dépendance


          Couplage faible: Il vaut mieux injecter en paramètre un objet issue d'une autre classe (injection de dépendances)
                            dans une méthode. (différente du couplage fort).
                            Injecter des objets de provenance de différentes classe dans mes méthodes de classe.

            $volant = new Volant();
            $pneus = new Pneus();
            $pneusTwo = new Pneus();
            $pneusThree = new Pneus();
            $pneusFour = new Pneus();
            $voiture = new Voiture();

          class Voiture{

            public function __construct(
              Volant $volant,
              Pneus $pneus,
              Pneus $pneusTwo,
              Pneus $pneusThree,
              Pneus $pneusFour){
            }
          }


  * Qu'est ce que l'Injection des Dépendances? Décrivez 1 exemple
  * Qu'est ce qu'un Design Pattern? Citez-en 2 en exemple
  * Qu'est ce que le MVC? A quoi ça sert en Orienté Objet?
  * Qu'est ce que Composer? A quoi cela va nous servir dans notre projet?
  * Qu'est ce qu'un trait ?
